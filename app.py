import sqlite3
from flask import Flask, render_template, request, url_for, flash, redirect
from werkzeug.exceptions import abort



# Defines our database connection
def get_db_connection():
    conn = sqlite3.connect('database.db')  # Established how we open a connection to the database.db file
    conn.row_factory = sqlite3.Row         # Sets row_factory attribute to the connection to have name-based access, database connection will return rows like Python dicts
    return conn                            # Returns the conn object that we can now use to access the database

# Defines how and where we get our posts from
def get_post(post_id):                                        # Our get_post function has a post_id argument that determines what post to return
    conn = get_db_connection()                                # Opens a connection to the DB
    post = conn.execute('SELECT * FROM posts WHERE id = ?',   # Executes an SQL query to get the post with the associated with post_id value
                        (post_id,)).fetchone()                # Fetchone() method gets result and stores it in post variable
    conn.close()                                              # Closes the connection
    if post is None:                                          # If post value is none then abort() is used to return 404 error code
        abort(404)
    return post                                               # If a post was foind then returns the post value


app = Flask(__name__)

# Defines secret key
app.config['SECRET_KEY'] = 'yoursecretkey'


# 
@app.route('/')
def index(): 
    conn = get_db_connection()                               # Opens a connection to the DB
    posts = conn.execute('SELECT * FROM posts').fetchall()   # Executes an SQL query that selects all entries in posts
    conn.close()                                             # Closes the connection to the DB
    return render_template('index.html', posts=posts)        # Returns the result of rendering the index.html template, passes posts as an argument to allow access to posts in the template


@app.route('/<int:post_id>')                          # Variable rule that specifies part after the slash is a positive integer
def post(post_id):                                    # Flask recognizes variable rule 
    post = get_post(post_id)                          # Get_post(post_id) pulls the ID and stores it in the post object
    return render_template('post.html', post=post)    # Returns the template post.html populated with data from the post as post


@app.route('/create', methods=('GET', 'POST'))                                  # Creates a route that accepts GET and POST requests
def create():                                                                   # Defines create() function
    if request.method == 'POST':                                                # Dictates the following code only applies for a POST request
        title = request.form['title']                                           # Takes the title from the form data
        content = request.form['content']                                       # Takes the content from the form data

        if not title:                                                           # States that if there is no title, will flash an error message
            flash('Title is required!')
        else:
            conn = get_db_connection()                                          # Opens a DB connection
            conn.execute('INSERT INTO posts (title, content) VALUES (?, ?)',    # Inserts title and content received in to 'posts' table
                         (title, content))
            conn.commit()                                                       # Commits the changes to the DB
            conn.close()                                                        # Closes the connection
            return redirect(url_for('index'))                                   # Returns a redirection by passing the URL generated by url_for with 'index' as an arg

    return render_template('create.html')


@app.route('/<int:id>/edit', methods=('GET', 'POST'))                   # URL determines which post is edited
def edit(id):                                                           # Flask passes the ID value entered to the edit function
    post = get_post(id)                                                 # Post stores the ID of the post

    if request.method == 'POST':                                        # Beginning logic block for a POST request being made
        title = request.form['title']                                   # Request.form grabs the title and assigns it to title object
        content = request.form['content']                               # Request.form grabs the content and assigns it to the content object

        if not title:                                                   # Logic that comes in to effect if no title is entered
            flash('Title is required!')                                 # If no title, flashes the message
        else:                                                           # Logic that comes in to effect when a title is entered
            conn = get_db_connection()                                  # Opens a connection to the DB
            conn.execute('UPDATE posts SET title = ?, content = ?'      # Sets new title, content, and where the ID is in the DB
                         ' WHERE id = ?',
                         (title, content, id))                          # Tells DB what attributes are being changed
            conn.commit()                                               # Commits changes to DB
            conn.close()                                                # Closes connection to the DB
            return redirect(url_for('index'))                           # Returns a redirection by passing the URL generated by url_for with 'index' as an arg

    return render_template('edit.html', post=post)                      # Returns a redirection by passing the URL generated by url_for with 'edit' as an arg
                                                                        # Shows new post as post

@app.route('/<int:id>/delete', methods=('POST',))                       # 
def delete(id):
    post = get_post(id)
    conn = get_db_connection()
    conn.execute('DELETE FROM posts WHERE id = ?', (id,))
    conn.commit()
    conn.close()
    flash('"{}" was successfully deleted!'.format(post['title']))
    return redirect(url_for('index'))